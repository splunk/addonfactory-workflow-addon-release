# jscpd:ignore-start
name: build-test-release
on:
  workflow_call:
    inputs:
      marker:
        required: false
        description: 'Parallel run marker'
        type: string
        default: >-
          [""]
    secrets:
      GH_TOKEN_ADMIN:
        description: Github admin token
        required: true
      GH_TOKEN:
        description: Github token
        required: true
      SEMGREP_PUBLISH_TOKEN:
        description: Semgrep token
        required: true
      AWS_ACCESS_KEY_ID:
        description: AWS access key id
        required: true
      AWS_DEFAULT_REGION:
        description: AWS default region
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: AWS secret access key
        required: true
      VT_API_KEY:
        description: Virustotal api key
        required: true
      CODECOV_TOKEN:
        description: Codecov token
        required: true
      OTHER_TA_REQUIRED_CONFIGS:
        description: other required configs
        required: true
      FOSSA_API_KEY:
        description: API token for FOSSA app
        required: true
      SKYNET_TOKEN:
        description: API token for Skynet
        required: false

jobs:
  setup-workflow:
    runs-on: ubuntu-latest
    outputs:
      skip_workflow: ${{ steps.skip-workflow.outputs.skip_workflow }}
      delay-destroy-ko: ${{ steps.delay-destroy-setup.outputs.delay-destroy-ko }}
      delay-destroy-ui: ${{ steps.delay-destroy-setup.outputs.delay-destroy-ui }}
      delay-destroy-modinput: ${{ steps.delay-destroy-setup.outputs.delay-destroy-modinput }}
      delay-destroy-escu: ${{ steps.delay-destroy-setup.outputs.delay-destroy-escu }}
      delay-destroy-scripted_inputs: ${{ steps.delay-destroy-setup.outputs.delay-destroy-scripted_inputs }}
      delay-destroy-requirement_test: ${{ steps.delay-destroy-setup.outputs.delay-destroy-requirement_test }}
      execute-ko: ${{ steps.delay-destroy-setup.outputs.execute-ko }}
      execute-ui: ${{ steps.delay-destroy-setup.outputs.execute-ui }}
      execute-escu: ${{ steps.delay-destroy-setup.outputs.execute-escu }}
      execute-modinput: ${{ steps.delay-destroy-setup.outputs.execute-modinput }}
      execute-scripted-inputs: ${{ steps.delay-destroy-setup.outputs.execute-scripted-inputs }}
      execute-requirement-test: ${{ steps.delay-destroy-setup.outputs.execute-requirement-test }}
    steps:
      - name: skip workflow if description is empty for labeled pr 
        id: skip-workflow
        run: |
          set +e
          TESTSET="knowledge ui modinput_functional scripted_inputs escu requirement_test"
          SKIP_WORKFLOW="No"
          for i in $TESTSET; do
              DELAY_DESTROY_$i="No"
              EXECUTE_$i="Yes"
              echo "DELAY_DESTROY_$i=Yes" >> $GITHUB_OUTPUT
              echo "EXECUTE_$i=No" >> $GITHUB_OUTPUT
          done
          if [[ '${{ github.event.label.name }}' == 'preserve_infra' && '${{ github.event.action }}' == 'labeled' ]]; then
            echo "${{ github.event.pull_request.body }}" >> body.txt
            SKIP_WORKFLOW="Yes" 
            tests=$(grep -i "^preserve:" body.txt | { grep -v grep || true; })
            if [[ $tests =~ "escu" ]]; then
              echo "preserve_infra for escu test-type is not supported yet"
            fi
            for i in $TESTSET; do
                if [[ $tests =~ "$i" ]]; then
                    SKIP_WORKFLOW="No"
                    DELAY_DESTROY_$i="Yes"
                    echo "DELAY_DESTROY_$i=Yes" >> $GITHUB_OUTPUT
                else
                    EXECUTE_$i="No" 
                    echo "EXECUTE_$i=No" >> $GITHUB_OUTPUT
                fi
            done
          fi
          echo "skip_workflow=$SKIP_WORKFLOW" >> $GITHUB_OUTPUT
          if [ "$SKIP_WORKFLOW" == "Yes" ]; then 
            echo "No description is provided with preserve infra label"
          fi 
      - name: setup for delay destroy
        id: delay-destroy-setup
        shell: bash
        run: |
          DELAY_DESTROY_escu="No"
          echo "delay-destroy-ko=${{ steps.skip-workflow.outputs.DELAY_DESTROY_knowledge }}" >> $GITHUB_OUTPUT
          echo "delay-destroy-ui=${{ steps.skip-workflow.outputs.DELAY_DESTROY_ui }}" >> $GITHUB_OUTPUT
          echo "delay-destroy-modinput=${{ steps.skip-workflow.outputs.DELAY_DESTROY_modinput_functional }}" >> $GITHUB_OUTPUT
          echo "delay-destroy-scripted_inputs=${{ steps.skip-workflow.outputs.DELAY_DESTROY_scripted_inputs }}" >> $GITHUB_OUTPUT
          echo "delay-destroy-escu=${{ steps.skip-workflow.outputs.DELAY_DESTROY_escu }}" >> $GITHUB_OUTPUT
          echo "delay-destroy-requirement_test=${{ steps.skip-workflow.outputs.DELAY_DESTROY_requirement_test }}" >> $GITHUB_OUTPUT
          echo "execute-ko=${{ steps.skip-workflow.outputs.EXECUTE_knowledge }}" >> $GITHUB_OUTPUT
          echo "execute-ui=${{ steps.skip-workflow.outputs.EXECUTE_ui }}" >> $GITHUB_OUTPUT
          echo "execute-modinput=${{ steps.skip-workflow.outputs.EXECUTE_modinput_functional }}" >> $GITHUB_OUTPUT
          echo "execute-scripted-inputs=${{ steps.skip-workflow.outputs.EXECUTE_scripted_inputs }}" >> $GITHUB_OUTPUT
          echo "execute-escu=${{ steps.skip-workflow.outputs.EXECUTE_escu }}" >> $GITHUB_OUTPUT
          echo "execute-requirement-test=${{ steps.skip-workflow.outputs.EXECUTE_requirement_test }}" >> $GITHUB_OUTPUT
  Check-variables:
    runs-on: ubuntu-latest
    needs: setup-workflow
    steps:
      - name: print details of variables
        run: |
          echo "${{ needs.setup-workflow.outputs.delay-destroy-ko }}"
          echo "${{ needs.setup-workflow.outputs.delay-destroy-modinput }}"
          echo "${{ needs.setup-workflow.outputs.delay-destroy-ui }}"
          echo "${{ needs.setup-workflow.outputs.delay-destroy-requirement_test }}"
          echo "${{ needs.setup-workflow.outputs.delay-destroy-scripted_inputs }}"
          echo "${{ needs.setup-workflow.outputs.delay-destroy-escu }}"
          echo "${{ needs.setup-workflow.outputs.execute-ko }}"
          echo "${{ needs.setup-workflow.outputs.execute-ui }}"
          echo "${{ needs.setup-workflow.outputs.execute-modinput }}"
          echo "${{ needs.setup-workflow.outputs.execute-scripted-inputs }}"
          echo "${{ needs.setup-workflow.outputs.execute-escu }}"
          echo "${{ needs.setup-workflow.outputs.execute-requirement-test }}"
    
  splunk-details:
    runs-on: ubuntu-latest
    steps:
      - name: print credentials in bold
        run: |
          BOLD="\033[1m"
          NORMAL="\033[0m"
          echo -e "Splunk username is${BOLD} admin${NORMAL}"
          # echo "Splunk username is `tput setaf 1`admin`tput sgr0`"
          # RED_FG=`tput setaf 1`
          # RESET=`tput sgr0`
          # echo "Splunk username is `tput setaf 1`admin`tput sgr0`"
          RED='\033[0;31m'
          NC='\033[0m' # No Color
          printf "I ${RED}love${NC} Stack Overflow\n"

  check-skip:
    runs-on: ubuntu-latest
    steps:
      - name: Stage that can fail or pass
        id: stage
        continue-on-error: true
        run: |
          echo "This stage will fail or pass"
          exit 1
      - name: Run this stage if first stage fails
        # if: ${{ failure() && steps.stage.conclusion == 'failure' }}
        if: always() && ${{ steps.stage.conclusion == 'failure' }}
        run: |
          echo "Inside the second stage"
          echo "Print conclusion of earlier stage"
          echo "${{ steps.test_report.outputs.conclusion }}"
      - name: Another stage that fails
        id: second-stage
        run: |
          echo "This is second stage that will fail"
          exit 1
      - name: Other stage
        run: |
          echo "Here I am"
      - name: Run if second stage fails
        if: ${{ failure() && steps.second-stage.conclusion == 'failure' }}
        run: |
          echo "Run stage if second failure stage fails"
          echo "Status of earlier stage is"
          echo "${{ steps.steps.second-stage.conclusion }}"