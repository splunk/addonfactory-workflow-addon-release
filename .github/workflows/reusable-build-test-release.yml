name: build-test-release
on:
  workflow_call:
    inputs:
      marker:
        required: false
        description: 'Parallel run mod_input marker'
        type: string
        default: >-
          [""]
      ucc-modinput-marker:
        required: false
        description: 'Parallel run ucc mod_input marker'
        type: string
        default: >-
          [""]
      ui_marker:
        required: false
        description: 'Parallel run ui marker'
        type: string
        default: >-
          [""]
      custom-version:
        required: false
        description: 'Version of release in the form of "x.x.x" string, specified by user instead of automatically generated semantic release'
        type: string
        default: ""
      execute-tests-on-push-to-release:
        required: false
        description: 'Flag to run all tests on push to release branch'
        type: string
        default: 'false'
      k8s-environment:
        required: false
        description: Specifies which environment to use for k8s testing. ["production", "staging"]
        type: string
        default: "production"
      k8s-manifests-branch:
        required: false
        description: "branch for k8s manifests to run the tests on"
        type: string
        default: "v3.3.2"
      scripted-inputs-os-list:
        required: false
        description: "list of OS used for scripted input tests"
        type: string
        default: >-
          ["ubuntu:14.04", "ubuntu:16.04","ubuntu:18.04","ubuntu:22.04", "ubuntu:24.04", "redhat:8.4", "redhat:8.5", "redhat:8.6", "redhat:8.8"]
      upgrade-tests-ta-versions:
        required: false
        description: "List with TA versions (in 'X.X.X' format) that should be used as starting points for upgrade tests. Example: ['7.6.0', '7.7.0']"
        type: string
        default: >-
          [""]
      wfe-run-on-splunk-latest:
        required: false
        description: "Forces WFE tests to run only on the latest Splunk when set to true. When set to false - will run on all supported Splunk versions required for the release. When not set - default behavior."
        type: string
        default: "false"
    secrets:
      GH_TOKEN_ADMIN:
        description: Github admin token
        required: true
      SEMGREP_PUBLISH_TOKEN:
        description: Semgrep token
        required: true
      AWS_ACCESS_KEY_ID:
        description: AWS access key id
        required: true
      AWS_DEFAULT_REGION:
        description: AWS default region
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: AWS secret access key
        required: true
      OTHER_TA_REQUIRED_CONFIGS:
        description: other required configs
        required: true
      FOSSA_API_KEY:
        description: API token for FOSSA app
        required: true
      SA_GH_USER_NAME:
        description: GPG signature username
        required: true
      SA_GH_USER_EMAIL:
        description: GPG signature user email
        required: true
      SA_GPG_PRIVATE_KEY:
        description: GPG signature private key
        required: true
      SA_GPG_PASSPHRASE:
        description: GPG signature passphrase
        required: true
      SPL_COM_USER:
        description: username to splunk.com
        required: true
      SPL_COM_PASSWORD:
        description: password to splunk.com
        required: true
permissions:
  contents: read
  packages: read
  statuses: write
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  validate-custom-version:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.custom-version != '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Validate custom version
        run: |
          if [[ ! ${{ github.event.inputs.custom-version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid custom version provided. Please provide a valid semver version."
            exit 1
          fi

          git fetch --tags
          if [ "$(git tag -l 'v${{ github.event.inputs.custom-version }}')" ]; then
            echo "The provided version already exists. Please provide a unique version."
            exit 1
          fi

  run-tests:
    if: ${{ !cancelled() }}
    name: run-tests
    runs-on: self-hosted
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - name: Create commit status
        id: create_status
        shell: bash
        run: |
          check_name="TACO tests"
          repo="${{ github.repository }}"
          sha="${{ github.sha }}"
          
          echo "Creating commit status for '$check_name'..."
          
          response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$repo/statuses/$sha" \
            -d "{
              \"state\": \"pending\",
              \"context\": \"$check_name\",
              \"target_url\": \"https://test-results-url.pl\"
            }")
          echo "Response: $response"
      - name: Get Check Run ID
        id: get_check
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          check_name="TACO tests"
          repo="${{ github.repository }}"
          sha="${{ github.sha }}"

          echo "Fetching check run ID for '$check_name' on commit '$sha'..."
          
          check_run_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$repo/commits/$sha/status" | \
            jq -r ".statuses[] | select(.context == \"$check_name\") | .id")

          if [[ -z "$check_run_id" ]]; then
            echo "No existing check run found for '$check_name'."
            exit 1
          fi

          echo "Check run ID: $check_run_id"
          echo "check_run_id=$check_run_id" >> $GITHUB_ENV
      - name: Send Details to AWS SQS
        id: send_to_sqs
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          queue_url="https://sqs.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ACCOUNT_ID}/gh-taco-queue.fifo"
          message_body=$(jq -n \
            --arg sha "${{ github.sha }}" \
            --arg workflow_id "${{ github.run_id }}" \
            --arg repo "${{ github.repository }}" \
            '{commit_sha: $sha, workflow_id: $workflow_id, repository: $repo}')
          
          aws sqs send-message \
            --queue-url "$queue_url" \
            --message-body "$message_body" \
            --message-group-id "github-actions-group"
      - name: waiting step
        run: |
          check_name="TACO tests"
          repo="${{ github.repository }}"
          sha="${{ github.sha }}"

          echo "Waiting for '$check_name' to complete..."
          
          while true; do
            status=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$repo/commits/$sha/status" | jq -r \
              ".statuses[] | select(.context == \"$check_name\") | .state")

            echo "Current status: $status"

            if [[ "$status" == "success" ]]; then
              echo "TACO tests success!"
              exit 0
            fi

            sleep 30
          done
    
  pre-publish:
    if: ${{ !cancelled() }}
    # The following line will rename 'pre-publish' to 'pre-publish-not_main_pr' when PR is created towards main branch
    # It is necessary to avoid confusion caused by github actions considering pre-publish for both push to develop branch
    # and pull_request to main branch events.
    name: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' &&  'pre-publish' ||  'pre-publish-not_main_pr' }}
    outputs: 
      run-publish: ${{ steps.check.outputs.run-publish }}
    needs:
      - validate-custom-version
      - run-tests
    runs-on: self-hosted
    env:
      NEEDS: ${{ toJson(needs) }}
    steps:
      - name: check if tests have passed or skipped
        id: check
        shell: bash
        run: |
          RUN_PUBLISH=$(echo "$NEEDS" | jq ".[] |  select(  ( .result != \"skipped\" ) and .result != \"success\" ) | length == 0")
          if [[ "$RUN_PUBLISH" != *'false'* ]]
          then
              echo "run-publish=true" >> "$GITHUB_OUTPUT"
              echo "Publish conditions are met."
          else
              echo "run-publish=false" >> "$GITHUB_OUTPUT"
              echo "Publish conditions are not met."
          fi

  publish:
    if: ${{ !cancelled() && needs.pre-publish.outputs.run-publish == 'true' && (github.event_name == 'push' || needs.validate-custom-version.result == 'success') }}
    name: ${{ github.event.inputs.custom-version == '' &&  'publish' ||  'publish-custom-version' }}
    needs:
      - pre-publish
      - validate-custom-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      pull-requests: read
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          persist-credentials: false
      - name: Semantic Release
        if: ${{ github.event.inputs.custom-version  == '' }}
        id: semantic
        uses: splunk/semantic-release-action@v1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
        with:
          git_committer_name: ${{ secrets.SA_GH_USER_NAME }}
          git_committer_email: ${{ secrets.SA_GH_USER_EMAIL }}
          gpg_private_key: ${{ secrets.SA_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.SA_GPG_PASSPHRASE }}
      - name: Release custom version
        if: ${{ github.event.inputs.custom-version  != '' }}
        id: custom
        uses: "softprops/action-gh-release@v2"
        with:
          token: "${{ secrets.GH_TOKEN_ADMIN }}"
          tag_name: v${{ github.event.inputs.custom-version }}
          target_commitish: "${{github.ref_name}}"
          make_latest: false
      - name: Download package-deployment
        if: ${{ steps.semantic.outputs.new_release_published == 'true' || steps.custom.outputs.upload_url  != '' }}
        uses: actions/download-artifact@v4
        id: download-package-deployment
        with:
          name: package-deployment
          path: download/artifacts/
      - name: Download package-splunkbase
        if: ${{ steps.semantic.outputs.new_release_published == 'true' || steps.custom.outputs.upload_url  != '' }}
        uses: actions/download-artifact@v4
        id: download-package-splunkbase
        with:
          name: package-splunkbase
          path: download/artifacts/deployment
      - name: Download cim-compliance-report
        id: download-cim-compliance-report
        if: ${{ steps.semantic.outputs.new_release_published == 'true' || steps.custom.outputs.upload_url  != '' }}
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: cim-compliance-report
          path: download/artifacts/deployment
      - name: List of assets
        if: ${{ steps.semantic.outputs.new_release_published == 'true'|| steps.custom.outputs.upload_url  != '' }}
        run: |
          ls -la ${{ steps.download-package-splunkbase.outputs.download-path }}
      - name: Upload assets to release
        if: ${{ steps.semantic.outputs.new_release_published == 'true' || steps.custom.outputs.upload_url  != '' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ github.token }}
          file: ${{ steps.download-package-splunkbase.outputs.download-path }}/*
          overwrite: true
          file_glob: true
          tag: v${{ github.event.inputs.custom-version != '' && github.event.inputs.custom-version || steps.semantic.outputs.new_release_version }}
