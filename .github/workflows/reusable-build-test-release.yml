# jscpd:ignore-start
name: build-test-release
on:
  workflow_call:
    inputs:
      marker:
        required: false
        description: 'Parallel run marker'
        type: string
        default: >-
          [""]
    secrets:
      GH_TOKEN_ADMIN:
        description: Github admin token
        required: true
      GH_TOKEN:
        description: Github token
        required: true
      SEMGREP_PUBLISH_TOKEN:
        description: Semgrep token
        required: true
      AWS_ACCESS_KEY_ID:
        description: AWS access key id
        required: true
      AWS_DEFAULT_REGION:
        description: AWS default region
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: AWS secret access key
        required: true
      VT_API_KEY:
        description: Virustotal api key
        required: true
      CODECOV_TOKEN:
        description: Codecov token
        required: true
      OTHER_TA_REQUIRED_CONFIGS:
        description: other required configs
        required: true
      FOSSA_API_KEY:
        description: API token for FOSSA app
        required: true
      SKYNET_TOKEN:
        description: API token for Skynet
        required: false

jobs:
  setup-workflow:
    runs-on: ubuntu-latest
    outputs:
      skip_workflow: ${{ steps.skip-workflow.outputs.skip_workflow }}
      delay-destroy-ko: ${{ steps.delay-destroy-setup.outputs.delay-destroy-ko }}
      delay-destroy-ui: ${{ steps.delay-destroy-setup.outputs.delay-destroy-ui }}
      delay-destroy-modinput: ${{ steps.delay-destroy-setup.outputs.delay-destroy-modinput }}
      delay-destroy-escu: ${{ steps.delay-destroy-setup.outputs.delay-destroy-escu }}
      delay-destroy-scripted_inputs: ${{ steps.delay-destroy-setup.outputs.delay-destroy-scripted_inputs }}
      delay-destroy-requirement_test: ${{ steps.delay-destroy-setup.outputs.delay-destroy-requirement_test }}
      execute-ko: ${{ steps.delay-destroy-setup.outputs.execute-ko }}
      execute-ui: ${{ steps.delay-destroy-setup.outputs.execute-ui }}
      execute-escu: ${{ steps.delay-destroy-setup.outputs.execute-escu }}
      execute-modinput: ${{ steps.delay-destroy-setup.outputs.execute-modinput }}
      execute-scripted-inputs: ${{ steps.delay-destroy-setup.outputs.execute-scripted-inputs }}
      execute-requirement-test: ${{ steps.delay-destroy-setup.outputs.execute-requirement-test }}
    steps:
      - name: skip workflow if description is empty for labeled pr 
        id: skip-workflow
        run: |
          set +e
          TESTSET="knowledge ui modinput_functional scripted_inputs escu requirement_test"
          SKIP_WORKFLOW="No"
          for i in $TESTSET; do
              eval DELAY_DESTROY_$i="No"
              eval EXECUTE_$i="Yes"
              echo "DELAY_DESTROY_$i=Yes" >> $GITHUB_OUTPUT
              echo "EXECUTE_$i=No" >> $GITHUB_OUTPUT
          done
          if [[ '${{ github.event.label.name }}' == 'preserve_infra' && '${{ github.event.action }}' == 'labeled' ]]; then
            echo "${{ github.event.pull_request.body }}" >> body.txt
            SKIP_WORKFLOW="Yes" 
            tests=$(grep -i "^preserve:" body.txt | { grep -v grep || true; })
            if [[ $tests =~ "escu" ]]; then
              echo "preserve_infra for escu test-type is not supported yet"
            fi
            for i in $TESTSET; do
                if [[ $tests =~ "$i" ]]; then
                    eval SKIP_WORKFLOW="No"
                    eval DELAY_DESTROY_$i="Yes"
                    echo "DELAY_DESTROY_$i=Yes" >> $GITHUB_OUTPUT
                else
                    eval EXECUTE_$i="No" 
                    echo "EXECUTE_$i=No" >> $GITHUB_OUTPUT
                fi
            done
          fi
          echo "skip_workflow=$SKIP_WORKFLOW" >> $GITHUB_OUTPUT
          if [ "$SKIP_WORKFLOW" == "Yes" ]; then 
            echo "No description is provided with preserve infra label"
          fi 
      - name: setup for delay destroy
        id: delay-destroy-setup
        shell: bash
        run: |
          DELAY_DESTROY_escu="No"
          echo "delay-destroy-ko=steps.skip-workflow.outputs.DELAY_DESTROY_knowledge" >> $GITHUB_OUTPUT
          echo "delay-destroy-ui=steps.skip-workflow.outputs.DELAY_DESTROY_ui" >> $GITHUB_OUTPUT
          echo "delay-destroy-modinput=steps.skip-workflow.outputs.DELAY_DESTROY_modinput_functional" >> $GITHUB_OUTPUT
          echo "delay-destroy-scripted_inputs=steps.skip-workflow.outputs.DELAY_DESTROY_scripted_inputs" >> $GITHUB_OUTPUT
          echo "delay-destroy-escu=steps.skip-workflow.outputs.DELAY_DESTROY_escu" >> $GITHUB_OUTPUT
          echo "delay-destroy-requirement_test=steps.skip-workflow.outputs.DELAY_DESTROY_requirement_test" >> $GITHUB_OUTPUT
          echo "execute-ko=steps.skip-workflow.outputs.EXECUTE_knowledge" >> $GITHUB_OUTPUT
          echo "execute-ui=steps.skip-workflow.outputs.EXECUTE_ui" >> $GITHUB_OUTPUT
          echo "execute-modinput=steps.skip-workflow.outputs.EXECUTE_modinput_functional" >> $GITHUB_OUTPUT
          echo "execute-scripted-inputs=steps.skip-workflow.outputs.EXECUTE_scripted_inputs" >> $GITHUB_OUTPUT
          echo "execute-escu=steps.skip-workflow.outputs.EXECUTE_escu" >> $GITHUB_OUTPUT
          echo "execute-requirement-test=steps.skip-workflow.outputs.EXECUTE_requirement_test" >> $GITHUB_OUTPUT
  meta:
    runs-on: ubuntu-latest
    needs:
      - setup-workflow
    if: ${{ needs.setup-workflow.outputs.skip_workflow != 'Yes' }}
    outputs:
      sc4s: ghcr.io/${{ github.repository }}/container:${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.version'] }}
      container_tags: ${{ steps.docker_action_meta.outputs.tags }}
      container_labels: ${{ steps.docker_action_meta.outputs.labels }}
      container_buildtime: ${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.created'] }}
      container_version: ${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.version'] }}
      container_revision: ${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.revision'] }}
      container_base: ${{ fromJSON(steps.docker_action_meta.outputs.json).tags[0] }}
      matrix_supportedSplunk: ${{ steps.matrix.outputs.supportedSplunk }}
      matrix_latestSplunk: ${{ steps.matrix.outputs.latestSplunk }}
      matrix_supportedSC4S: ${{ steps.matrix.outputs.supportedSC4S }}
      matrix_supportedModinputFunctionalVendors: ${{ steps.matrix.outputs.supportedModinputFunctionalVendors }}
      matrix_supportedUIVendors: ${{ steps.matrix.outputs.supportedUIVendors }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Semantic Release
        id: version
        uses: cycjimmy/semantic-release-action@v2.7.0
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            semantic-release-helm
            @google/semantic-release-replace-plugin
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Docker meta
        id: docker_action_meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ghcr.io/${{ github.repository }}/container
          tags: |
            type=sha,format=long
            type=sha
            type=semver,pattern={{version}},value=${{ steps.version.outputs.new_release_version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.new_release_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.new_release_version }}
            type=ref,event=branch
            type=ref,event=pr
      - name: matrix
        id: matrix
        uses: splunk/addonfactory-test-matrix-action@v1.8
      - name: print credentials in bold
        run: |
          BOLD="\033[1m"
          NORMAL="\033[0m"
          echo -e "Splunk username is${BOLD} admin${NORMAL}"
  splunk-details:
    runs-on: ubuntu-latest
    steps:
      - name: print credentials in bold
        run: |
          BOLD="\033[1m"
          NORMAL="\033[0m"
          echo -e "Splunk username is${BOLD} admin${NORMAL}"
          # echo "Splunk username is `tput setaf 1`admin`tput sgr0`"
          # RED_FG=`tput setaf 1`
          # RESET=`tput sgr0`
          # echo "Splunk username is `tput setaf 1`admin`tput sgr0`"
  fossa-scan:
    continue-on-error: true
    needs:
      - setup-workflow
    if: ${{ needs.setup-workflow.outputs.skip_workflow != 'Yes' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: run fossa anlyze and create report
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze --debug
          fossa report attribution --format text --timeout 600 > /tmp/THIRDPARTY
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - name: upload THIRDPARTY file
        uses: actions/upload-artifact@v3
        with:
          name: THIRDPARTY
          path: /tmp/THIRDPARTY
      - name: run fossa test
        run: |
          fossa test --debug
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

  